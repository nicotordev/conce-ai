// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  password      String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  Role          Role?          @relation(fields: [roleId], references: [id])
  roleId        String?
  Conversation  Conversation[]
  Files         ConceAIFile[]
  SearchQuery   SearchQuery[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Model {
  id                         String   @id @default(uuid())
  name                       String   @unique
  version                    String
  displayName                String
  description                String?
  inputTokenLimit            Int
  outputTokenLimit           Int
  supportedGenerationMethods String[]
  temperature                Float?
  topP                       Float?
  topK                       Int?
  maxTemperature             Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Conversation {
  id          String        @id @default(cuid())
  title       String?
  user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  messages    Message[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SearchQuery SearchQuery[]
}

model Message {
  id             String        @id @default(cuid())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         MessageSender
  content        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ConceAIFile {
  id                   String @id @default(cuid())
  name                 String @unique
  src                  String @unique
  previewSrc           String
  type                 String
  mimeType             String
  nameWithoutExtension String
  sizeInMB             Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model News {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  image       String
  publishedAt DateTime @map("published_at")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SearchQuery {
  id             String         @id @default(cuid())
  originalQuery  String
  searchQuery    String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  results        SearchResult[]
  conversation   Conversation?  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  user           User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?

  @@index([originalQuery])
  @@index([searchQuery])
  @@index([createdAt])
  @@index([userId])
  @@index([conversationId])
}

model SearchResult {
  id          String      @id @default(cuid())
  position    Int
  title       String
  url         String      @db.Text
  snippet     String      @db.Text
  source      String // "google", "bing", etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  searchQuery SearchQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)
  queryId     String

  @@index([position])
  @@index([source])
  @@index([queryId])
}

model AppSuggestion {
  id        String            @id @default(cuid())
  label     String
  icon      AppSuggestionIcon
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model AppIdea {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AppSuggestionIcon {
  PENSANDO
  ALEGRE
  MISTERIOSO
  TECNOLOGICO
  CREATIVO
}

enum MessageSender {
  USER
  ASSISTANT
}
